{"version":3,"sources":["assets/images/spacex_logo.svg","components/Header.js","components/Footer.js","components/SatSetting.js","assets/images/satelite.svg","components/SatelliteList.js","constants.js","components/WorldMap.js","components/Main.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","spacex_logo","alt","Component","Footer","SatSettingForm","ShowSatellite","e","preventDefault","console","log","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","min","max","placeholder","style","width","type","htmlType","textAlign","SetSetting","Form","create","name","SatelliteList","state","selected","isLoad","onShowSatMapStatus","onShowMap","onChange","target","dataInfo","checked","list","addOrRemove","setState","item","status","found","some","entry","satid","filter","satList","satInfo","above","isLoading","size","onClick","tip","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","SAT_API_KEY","NEARBY_SATELLITE","height","WorldMap","track","data","hasOwnProperty","Error","len","positions","length","context2","observeData","duration","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","generateMap","land","projection","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","pos","satlongitude","satlatitude","match","join","xy","color","arc","Math","PI","React","createRef","d3Scale","schemeCategory10","axios","get","then","res","feature","objects","countries","features","catch","prevProps","prevState","snapshot","satData","latitude","longitude","altitude","elevation","endTime","urls","url","Promise","all","results","arr","ref","Main","settings","isLoadingList","showMap","showNearbySatellite","setting","fetchSatellite","response","SatSetting","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6ff1e3e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacex_logo.ad25dfff.svg\";","import React, {Component} from 'react';\nimport spacex_logo from \"../assets/images/spacex_logo.svg\";\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n                <p className = \"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"footer\">\n                \"©2021 StarLink Tracker. All Rights Reserved. Website Made by Tyler Zhixing Wang\"\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, {Component} from \"react\";\nimport {Form,Button, InputNumber} from \"antd\";\n\nclass SatSettingForm extends Component {\n    render() {\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = {\n            labelCol:{\n                xs:{span:24},\n                sm:{span:11},\n\n            },\n            wrapperCol:{\n                xs:{span:24},\n                sm:{span:13}\n            }\n        }\n        return (\n            <Form {...formItemLayout} onSubmit={this.ShowSatellite} className=\"sat-setting\">\n                <Form.Item label=\"Longitude(degree):\">\n                    {\n                        getFieldDecorator('longitude', {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: 'please input your Longitude'\n                                }\n                            ],\n                        })(<InputNumber min={-180} max={180}\n                                        placeholder=\"please input longitude\"\n                                        style={{width: \"100%\"}}/>)\n                    }\n                </Form.Item>\n                <Form.Item label=\"Latitude(degree):\">\n                    {\n                        getFieldDecorator('latitude',{\n                            rules:[\n                                {\n                                    required : true,\n                                    message : 'please input your Latitude'\n                                }\n                            ],\n                        })(<InputNumber min={-90} max = {90}\n                                 placeholder=\"please input Latitude\"\n                                 style = {{width:\"100%\"}}/>)\n                    }\n                </Form.Item>\n\n                <Form.Item label=\"Elevation(meters)\">\n                    {\n                        getFieldDecorator(\"elevation\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please input your Elevation\",\n                                }\n                            ],\n                        })(<InputNumber placeholder=\"Please input Elevation\"\n                                        min={-413} max={8850}\n                                        style={{width: \"100%\"}}\n                        />)\n                    }\n                </Form.Item>\n\n                <Form.Item label=\"Altitude(degrees)\">\n                    {\n                        getFieldDecorator(\"altitude\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please input your Altitude\",\n                                }\n                            ],\n                        })(<InputNumber placeholder=\"Please input Altitude\"\n                                        min={0} max={90}\n                                        style={{width: \"100%\"}}\n                        /> )\n                    }\n                </Form.Item>\n\n                <Form.Item label=\"Duration(secs)\">\n                    {\n                        getFieldDecorator(\"duration\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please input your Duration\",\n                                }\n                            ],\n                        })(<InputNumber placeholder=\"Please input Duration\" min={0} max={90} style={{width: \"100%\"}} />)\n                    }\n                </Form.Item>\n\n                <Form.Item className=\"show-nearby\">\n                    <Button type=\"primary\" htmlType=\"submit\" style={{textAlign:\"center\"}}>\n                        Find Nearby Satellite\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    ShowSatellite=(e)=>{\n        e.preventDefault();\n        console.log(\"clicked\");\n        this.props.form.validateFields((err,values)=>{\n            if (!err){\n                console.log(values);\n                this.props.onShow(values);\n            }\n        })\n    }\n}\n\nconst SetSetting = Form.create({name:'satellite-setting'})(SatSettingForm);\nexport default SetSetting;","export default __webpack_public_path__ + \"static/media/satelite.d327b26a.svg\";","import React, {Component} from 'react';\nimport {List, Button,Checkbox,Avatar, Spin } from 'antd';//Spin用作加载的时候的图标\nimport satellite from \"../assets/images/satelite.svg\";\n\nclass SatelliteList extends Component {\n    // constructor(){\n    //     super();\n    //     this.state = {\n    //         selected :[],\n    //         isLoad:false;\n    //\n    // }\n\n    state = {\n        selected :[],\n        isLoad:false\n    }\n\n    render() {\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n\n        const {isLoading} = this.props; //解构\n\n        return (\n            <div className=\"sat-list-box\">\n                    <Button className=\"sat-list-btn\"\n                            type=\"primary\"\n                            size=\"large\"\n                            onClick={this.onShowSatMapStatus}>Track on the map</Button>\n                <hr/>\n\n                {\n                    isLoading\n                    ?\n                    <div className=\"spin-box\">\n                        <Spin size = \"large\" tip =\"loading...\"></Spin>\n                    </div>\n                    :\n                    <List className=\"sat-list\"\n                        itemLayout=\"horizontal\"\n                           dataSource={satList}\n                           renderItem={\n                               item=>\n                                   <List.Item//loop over all item in the render content//List的API\n                                       actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}>\n                                        <List.Item.Meta\n                                            avatar = {<Avatar src ={satellite} size = {50}/>}\n                                            title  = {<p>{item.satname}</p>}\n                                            description ={`Launch Data: ${item.launchDate}`}\n                                        />\n                                   </List.Item>\n                           }\n                    /> }\n            </div>\n        );\n    }\n\n    onShowSatMapStatus = ()=>{\n        this.props.onShowMap(this.state.selected)\n    }\n\n    onChange =  e=>{\n        //console.log(\"selected checkbox\",e.target); // 通过target获取数据\n        //console.log(\"data->\",e.target.dataInfo);\n        //step1 : get current selected satellite\n        const {dataInfo,checked} = e.target;\n        const {selected} = this.state;\n        //step2 :  add or remove current sat to/from selected array\n        const list = this.addOrRemove(dataInfo,checked,selected)\n        //step3 : update selected state\n        this.setState(\n            {selected:list}\n        )\n        //console.log(list);\n    }\n\n    addOrRemove = (item,status,list) =>{\n        // case 1 : check if is true\n        //      -> item is not in the list : add the item\n        //      -> item is in the list : nothing\n        // case 2 : if is false\n        //      -> item is in the list : remove the item\n        //      -> item is not in the list : nothing\n\n        const found = list.some(entry=>entry.satid===item.satid);\n\n        if (status && !found) {\n            list = [...list, item];\n            //list.push(item)\n        } else if (!status && found){\n            list = list.filter(entry => entry.satid !== item.satid);\n        }\n        return list;\n    }\n}\n\nexport default SatelliteList;\n","export const SAT_API_KEY = \"8LBHPL-K4DR9H-3WYN6U-4LWC\"\nexport const STARLINK_CATEGORY = \"52\";\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";","import {WORLD_MAP_URL,SAT_API_KEY,SATELLITE_POSITION_URL} from \"../constants\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\n\nconst height = 600;\nconst width = 960;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n        this.state = {\n            isLoading :false,\n            isDrawing: false\n        }\n        this.map = null\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    }\n    componentDidMount(){\n        axios.get(WORLD_MAP_URL).then( res=>{\n            console.log(res);\n            const {data} = res;\n            const land = feature(data,data.objects.countries).features;\n            //console.log(land)\n            this.generateMap(land);\n        }).catch(err=>{\n            console.log(err)\n        })\n\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData!==this.props.satData){\n            const{latitude,\n                  longitude,\n                  elevation,\n                  altitude,\n                  duration} = this.props.observeData\n\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading:true\n            });\n\n            //step1 : prepare for urls\n            const urls = this.props.satData.map(sat=>{\n                const {satid} = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${altitude}/${endTime}/&apiKey=${SAT_API_KEY}`;\n                return axios.get(url);\n            })\n            //console.log(\"url -> \",urls)\n\n            //step2: fetch sats positions\n            // axios.all(urls)\n            //     .then(axios.spread((...args)=>{\n            //         return args.map(item => item.data)\n            //     }))//扁平化之后获得data\n            //     .then(response=>{\n            //         console.log('response=>' ,response)\n            //     }).catch(err=>{\n            //         console.log(err)\n            //         })\n            Promise.all(urls) //这里的Promise那里来的\n                .then(results=>{\n                    console.log('->',results);\n                    const arr = results.map(sat=>sat.data);\n                    this.setState({\n                        isLoading:false,\n                        isDrawing:true\n                    })\n                    //case 1 : is not Drawing - > track\n                    //case 2 : is Drawing     - > don' track\n                    if (!prevState.isDrawing){\n                        console.log(arr)\n                        this.track(arr)\n                    }else{\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\n\n                    }\n                }).catch(err=>{\n                    console.log(err)\n                })\n        }\n    }\n\n    track = data=>{\n        if (!data[0] || !data[0].hasOwnProperty('positions')){\n            throw new Error(\"no position data\");\n            return;\n        }\n        const len = data[0].positions.length;//一个卫星轨迹的个数\n        const {duration} = this.props.observeData;\n        const {context2} = this.map;\n\n        let now = new Date();\n        let i = 0;\n        let timer = setInterval(()=>{\n            let ct = new Date()\n            let timePassed =i ===0 ? 0:ct - now;\n            let time = new Date(now.getTime() +60* timePassed)\n\n            context2.clearRect(0,0,width,height);  // ?????\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\"\n            context2.textAlign = \"center\"\n            context2.fillText(d3TimeFormat(time),width/2,10);\n\n            if (i>=len){\n                clearInterval(timer);\n                this.setState({ isDrawing: false });\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                return;\n\n            }\n\n            data.forEach(sat=>{\n                const {info,positions} = sat;\n                this.drawSat(info,positions[i])\n            })\n            console.log(i)\n            i+=60;\n        },1000)\n\n\n    }\n\n    generateMap = land=>{\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width/2, height/2])\n            .precision(0.1);\n        //console.log(projection)\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current) //通过ref下的current获得该ref\n            .attr(\"width\",width)\n            .attr(\"height\",height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\",width)\n            .attr(\"height\",height);\n\n        const context = canvas.node().getContext(\"2d\")\n        const context2 = canvas2.node().getContext(\"2d\")\n\n        let path = geoPath().projection(projection).context(context) //context是设置画板\n\n        land.forEach(ele => {\n            context.fillStyle = '#B3DDEF';//大陆的颜色\n            context.strokeStyle = '#000'; //画笔颜色//board color\n            context.globalAlpha = 0.7;//透明度\n            context.beginPath();//开始画图\n            path(ele); //之前定义的方法 L43\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n\n        this.map = {\n            context:context,\n            context2:context2,\n            projection: projection\n        }\n    }\n\n    drawSat = (sat,pos) =>{\n        const {satlongitude,satlatitude} = pos;\n        if (!satlongitude ||!satlatitude){\n            return\n        }\n        const {satname} = sat;\n        const name = satname.match(/\\d+/g).join(\"\");\n\n        const {projection, context2} = this.map;\n        const xy = projection([satlongitude,satlatitude])\n        context2.fillStyle = this.color(name);\n        context2.beginPath();\n        context2.arc(xy[0],xy[1],4,0,2*Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(name,xy[0],xy[1]+10);\n\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"map-box\">\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack}/>\n                <div className=\"hint\"/>\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;\n\n//react-simple-map","import React, {Component} from 'react';\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport {NEARBY_SATELLITE, STARLINK_CATEGORY,SAT_API_KEY} from \"../constants\";\nimport axios from 'axios'\nimport WorldMap from \"./WorldMap\";\n\nclass Main extends Component {\n    state = {\n        satInfo:null,\n        settings:null,\n        satList:null,\n        isLoadingList:false\n    }\n    render() {\n        const {satInfo,isLoadingList,settings,satList} = this.state;\n        return (\n            <div className=\"main\">\n                <div className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite}/>\n                    <SatelliteList satInfo={satInfo}\n                                    isLoading={isLoadingList}\n                                    onShowMap={this.showMap}/>\n                </div>\n                <div className=\"right-side\">\n                    <WorldMap satData={satList} observeData={settings}/>\n                </div>\n            </div>\n        );\n    }\n\n    showMap = (selected)=> {\n        this.setState({\n            satList: [...selected]\n        })//satList的copy，shadowCopy\n\n    }\n    showNearbySatellite = setting =>{\n        console.log('setting ->', setting);\n        this.setState({settings:setting});\n        this.fetchSatellite(setting);\n    }\n    fetchSatellite = setting=>{\n        //fetch date from N2YO\n        // step1: get setting values\n\n        const {latitude,longitude,elevation,altitude} = setting;\n\n        //step2: prepare the url\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n        this.setState({isLoadingList : true});\n\n\n        //step3: make ajax call\n        axios.get(url).then(response=>{\n            console.log(response)\n            this.setState({satInfo: response.data,\n                                isLoadingList:false});\n        }).catch(err=>{\n            console.log('error in fetch satellite list -> ',err);\n            this.setState({isLoadingList:false})\n        })\n\n\n\n    }\n}\n\nexport default Main;\n//npm install --save topojson-client //将top数据转化为GEOjson\n//npm install --save d3-geo          //画地图，并且加上经纬线\n//npm install --save d3-geo-projection // d3 的拓展\n//npm install --save d3-selection      //地图数据","import Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\nimport React from \"react\";\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Main/>\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}